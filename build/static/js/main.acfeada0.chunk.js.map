{"version":3,"sources":["redux/slicers/testSlicer.js","redux/slicers/regionSlicer.js","redux/slicers/addEducationSlicer.js","redux/app/rootReducers.js","redux/app/store.js","App.js","reportWebVitals.js","index.js"],"names":["testSlicer","createSlice","name","initialState","user","reducers","success","state","payload","actions","testAction","dispatch","email","error","console","log","regionSlicer","cstates","ccity","pstates","pcity","isLoading","isError","isPending","cisState","cisCity","pisState","pisCity","isRejected","cStateAction","a","stateSort","AllSorts","State","getAllStates","res","filter","s","countryCode","isoCode","message","cCityAction","statecode","City","getAllCities","citySort","city","stateCode","pStateAction","pCityAction","arr","sort","b","nameA","toUpperCase","nameB","addEducationSlicer","addEducation","educationSuccess","push","remove","splice","addEducationAction","RemoveAction","index","testConfig","key","storage","rootReducers","combineReducers","testState","persistReducer","regionState","educationState","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","immutableCheck","persistor","getState","persistStore","NavBar","lazy","Footer","LandingPage","ApplyJobCard","ApplyJobCard1","Contact","About","ApplyJobCard2","App","fallback","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.acfeada0.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport { dispatch } from '../app/store';\r\n\r\nconst initialState = {\r\n    user: {}\r\n};\r\n\r\nconst testSlicer = createSlice({\r\n    name: 'user',\r\n    initialState,\r\n    reducers: {\r\n        success: (state, { payload }) => {\r\n            state.user = payload\r\n        }\r\n    }\r\n});\r\n\r\nexport default testSlicer.reducer;\r\n\r\nexport const { success } = testSlicer.actions;\r\n\r\nexport const testAction = () => {\r\n    try {\r\n        const users = { name: 'imran', email: 'imran@gmail.com' }\r\n        dispatch(success(users))\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}","import { createSlice } from '@reduxjs/toolkit';\r\nimport { Country, State, City } from 'country-state-city';\r\nimport { dispatch } from '../app/store';\r\n\r\nconst initialState = {\r\n    cstates: [],\r\n    ccity: [],\r\n    pstates: [],\r\n    pcity: [],\r\n    isLoading: false,\r\n    isError: null\r\n};\r\n\r\nconst regionSlicer = createSlice({\r\n    name: 'region',\r\n    initialState,\r\n    reducers: {\r\n        isPending: (state) => {\r\n            state.isLoading = true\r\n        },\r\n        cisState: (state, { payload }) => {\r\n            state.isLoading = false;\r\n            state.cstates = payload;\r\n        },\r\n        cisCity: (state, { payload }) => {\r\n            state.isLoading = false;\r\n            state.ccity = payload;\r\n        },\r\n        pisState: (state, { payload }) => {\r\n            state.isLoading = false;\r\n            state.pstates = payload;\r\n        },\r\n        pisCity: (state, { payload }) => {\r\n            state.isLoading = false;\r\n            state.pcity = payload\r\n        },\r\n        isRejected: (state, { payload }) => {\r\n            state.isLoading = false;\r\n            state.isError = payload;\r\n        }\r\n    }\r\n});\r\n\r\nexport default regionSlicer.reducer;\r\n\r\nexport const { isPending, cisState, cisCity, pisCity, pisState, isRejected } = regionSlicer.actions;\r\n\r\nexport const cStateAction = async () => {\r\n    dispatch(isPending());\r\n    try {\r\n        const stateSort = AllSorts(State.getAllStates())\r\n        const res = stateSort.filter(s => {\r\n            return s.countryCode === 'IN' && s.isoCode === 'JH'\r\n        });\r\n        dispatch(cisState(res))\r\n    } catch (error) {\r\n        dispatch(isRejected(error.message));\r\n    }\r\n}\r\n\r\nexport const cCityAction = async (statecode) => {\r\n    dispatch(isPending());\r\n    try {\r\n        const citySort = await AllSorts(City.getAllCities())\r\n        const res = citySort.filter(city => {\r\n            return city.stateCode === statecode\r\n        });\r\n        dispatch(cisCity(res))\r\n    } catch (error) {\r\n        dispatch(isRejected(error.message));\r\n    }\r\n}\r\n\r\n\r\nexport const pStateAction = async () => {\r\n    dispatch(isPending());\r\n    try {\r\n        const stateSort = AllSorts(State.getAllStates())\r\n        const res = stateSort.filter(s => {\r\n            return s.countryCode === 'IN' && s.isoCode === 'JH'\r\n        });\r\n        dispatch(pisState(res))\r\n    } catch (error) {\r\n        dispatch(isRejected(error.message));\r\n    }\r\n}\r\n\r\nexport const pCityAction = async (statecode) => {\r\n    dispatch(isPending());\r\n    try {\r\n        const citySort = await AllSorts(City.getAllCities())\r\n        const res = citySort.filter(city => {\r\n            return city.stateCode === statecode\r\n        });\r\n        dispatch(pisCity(res))\r\n    } catch (error) {\r\n        dispatch(isRejected(error.message));\r\n    }\r\n}\r\n\r\n\r\nconst AllSorts = (arr) => {\r\n    const Sorts = arr.sort((a, b) => {\r\n        let nameA = a.name.toUpperCase(); // ignore upper and lowercase\r\n        let nameB = b.name.toUpperCase(); // ignore upper and lowercase\r\n        if (nameA < nameB) return -1;\r\n        if (nameA > nameB) return 1;\r\n        // names must be equal\r\n        return 0;\r\n    })\r\n    return Sorts\r\n}","import { createSlice } from '@reduxjs/toolkit';\r\nimport { dispatch } from '../app/store';\r\n\r\nconst initialState = {\r\n    addEducation: []\r\n};\r\n\r\nconst addEducationSlicer = createSlice({\r\n    name: 'education',\r\n    initialState,\r\n    reducers: {\r\n        educationSuccess: (state, { payload }) => {\r\n            state.addEducation.push(payload);\r\n        },\r\n        remove: (state, { payload }) => {\r\n            state.addEducation.splice(payload, 1);\r\n        },\r\n    }\r\n});\r\n\r\nexport default addEducationSlicer.reducer;\r\n\r\nexport const { educationSuccess, remove } = addEducationSlicer.actions;\r\n\r\nexport const addEducationAction = (payload) => {\r\n    dispatch(educationSuccess(payload))\r\n}\r\n\r\nexport const RemoveAction = (index) => {\r\n    dispatch(remove(index))\r\n};","import { combineReducers } from \"@reduxjs/toolkit\";\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport testSlicer from \"../slicers/testSlicer\";\r\nimport regionSlicer from '../slicers/regionSlicer';\r\nimport addEducationSlicer from \"../slicers/addEducationSlicer\";\r\n\r\nconst testConfig = {\r\n    key: 'test',\r\n    storage\r\n};\r\n\r\nconst rootReducers = combineReducers({\r\n    testState: persistReducer(testConfig, testSlicer),\r\n    regionState: regionSlicer,\r\n    educationState: addEducationSlicer\r\n})\r\n\r\nexport default rootReducers;","import { configureStore } from '@reduxjs/toolkit';\r\nimport { persistStore } from 'redux-persist';\r\nimport rootReducers from './rootReducers';\r\n\r\nconst store = configureStore({\r\n    reducer: rootReducers,\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware({\r\n            serializableCheck: false,\r\n            immutableCheck: false\r\n        })\r\n});\r\n\r\nconst { dispatch, getState } = store;\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor, dispatch, getState }\r\n","import React, { lazy, Suspense } from 'react';\nimport { Routes, Route } from 'react-router-dom';\n// import NavBar from './Components/NavBar';\n// import Footer from './Components/Footer';\n// import LandingPage from './pages/LandingPage';\n// import ApplyJobCard from './pages/ApplyJobCard';\n// import ApplyJobCard1 from './pages/ApplyJobCard1';\n// import About from './pages/About';\n// import Contact from './pages/Contact';\n// import ApplyJobCard2 from './pages/ApplyJobCard2';\n\nconst NavBar = lazy(() => import('./Components/NavBar'))\nconst Footer = lazy(() => import('./Components/Footer'))\nconst LandingPage = lazy(() => import('./pages/LandingPage'))\nconst ApplyJobCard = lazy(() => import('./pages/ApplyJobCard'))\nconst ApplyJobCard1 = lazy(() => import('./pages/ApplyJobCard1'))\nconst Contact = lazy(() => import('./pages/Contact'))\nconst About = lazy(() => import('./pages/About'))\nconst ApplyJobCard2 = lazy(() => import('./pages/ApplyJobCard2'))\n\nfunction App() {\n  return (\n    <Suspense fallback={<span>Loading</span>}>\n      <NavBar />\n      <Routes>\n        <Route path='/' element={<LandingPage />} />\n        <Route path='/applycard' element={<ApplyJobCard />} />\n        <Route path='/applycard1' element={<ApplyJobCard1 />} />\n        <Route path='/applycard2' element={<ApplyJobCard2 />} />\n        <Route path='/about' element={<About />} />\n        <Route path='/contact' element={<Contact />} />\n      </Routes>\n      <Footer />\n    </Suspense>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/app/store';\nimport './index.css';\nimport 'mdb-react-ui-kit/dist/css/mdb.min.css'\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate persistor={persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}